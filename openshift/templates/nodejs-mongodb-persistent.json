app.get('/set', function (req, res) {  
  console.log('Set request is processing...');
	  // extract parameters
	  var surveyID = req.query.surveyID;
	  var panelID = req.query.panelID;
	  var recipientID = req.query.recipientID;
	  var responseID = req.query.responseID;
	  var name  = req.query.name;                   // Name (of name-value-pair)
	  var value = req.query.value;                  // Value (of name-value-pair)
	  var filter = {
	                surveyID: surveyID,
	                panelID: panelID,
	                recipientID: recipientID,
	                responseID: responseID,
	                name: name
	            };
	
	  // try to initialize the db on every request if it's not already
	  // initialized.
	  if (!db) {
	    initDb(function(err){});
	  }
	  if (db) {
	    try {
	        var col = db.collection('nvpairs');
	        var valueJSON = {
	                surveyID: surveyID,
	                panelID: panelID,
	                recipientID: recipientID,
	                responseID: responseID,
	                name: name,
	                value: value,
	                date: Date.now()
	            };
	        console.log('valueJSON = %j', valueJSON);
	        // Create/replace a document
	        col.replaceOne( filter, valueJSON, { upsert: true } );
	        res.send({ result: 'success', rc: 0 });
	    } catch (e) {
	        res.send({ result: e, rc: 8 });
	        console.log('e = %j', e);
	        console.log('e = %s', e);
	    };
	
	  } else {
	    res.send({ result: 'failed', rc: 4 });
	  }
	});
	
	app.get('/getJSON', function (req, res) {
	  console.log('Get JSON request is processing...');
	  // extract parameters
	  var surveyID = req.query.surveyID;
	  var panelID = req.query.panelID;
	  var recipientID = req.query.recipientID;
	  var responseID = req.query.responseID;
	  var name  = req.query.name;                   // Name (of name-value-pair)
	  var value = req.query.value;                  // Value (of name-value-pair)
	  if (value !== undefined) {
	      res.send({ result: 'failed', rc: 12 , info: 'unexpected value passed. Not allowed.'});
	      return;
	  }
	  var filter = {
	                surveyID: surveyID,
	                panelID: panelID,
	                recipientID: recipientID,
	                responseID: responseID,
	                name: name
	            };
	
	  // try to initialize the db on every request if it's not already
	  // initialized.
	  if (!db) {
	    initDb(function(err){});
	  }
	  if (db) {
	    try {
	        var col = db.collection('nvpairs');
	        // Create a document with request IP and current time of request
	        col.findOne( filter , function(err, doc) {
	            if (!doc)
	                res.send({ result: 'success', rc: 0, info: 'not found' });
	            else {
	                //console.log('Raw Doc: %j', doc);
	                //console.log('Value %s', doc.value);
	                //console.log('JSONValue %j', doc.value);
	                res.send({ value: doc, result: 'success', rc: 0 });
	            }
	        } );
	    } catch (e) {
	        console.log('e = %j', e);
	        res.send({ result: 'failed', rc: 8 });
	    };
	  } else {
	    res.send({ result: 'failed', rc: 4 });
	  }
	});
